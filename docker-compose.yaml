version: '3'

services:
    db:
        image: postgres:14
        volumes:
            - /private/var/lib/postgresql:/var/lib/postgresql
        ports:
            - "5435:5432"
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: admin
            POSTGRES_DB: teinformatech
        networks: 
            - app-network
    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: backend
        entrypoint: dockerize -wait tcp://db:5432 -wait tcp://redis:6379 -timeout 20s docker-entrypoint.sh
        command: npm run start
        networks: 
            - app-network
        ports:
            - "3000:3000"
        volumes: 
            - ./backend:/usr/src/app
            - /usr/src/app/node_modules
        tty: true
        depends_on: 
            - db

    frontend-site:
        build:
            context: ./frontend/website
            dockerfile: Dockerfile
        container_name: frontend-site
        command: npm run dev -- -p 80
        networks: 
            - app-network
        ports:
            - "80:80"
        volumes: 
            - ./frontend/website:/usr/src/app
            - /usr/src/app/node_modules
        tty: true
        depends_on: 
            - backend

    frontend-admin:
        build:
            context: ./frontend/admin
            dockerfile: Dockerfile
        container_name: frontend-admin
        command: npm run start
        networks: 
            - app-network
        ports:
            - "8080:8080"
        volumes: 
            - ./frontend/admin:/usr/src/app
            - /usr/src/app/node_modules
        tty: true
        depends_on: 
            - frontend-site
    
    redis:
        image: "redis:alpine"
        networks: 
            - app-network
        ports:
            - "6379:6379"

networks: 
  app-network:
    driver: bridge
