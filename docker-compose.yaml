version: '3'

services:
    db:
        image: postgres:14
        volumes:
            - /private/var/lib/postgresql:/var/lib/postgresql
        ports:
            - "5439:5432"
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: admin
            POSTGRES_DB: teinformatech
        networks:
            - app-network
    frontend-site:
        build:
            context: ./frontend/website
            dockerfile: Dockerfile
        container_name: frontend-site
        command: npm run dev -- -p 80
        networks: 
            - app-network
        ports:
            - "80:80"
        volumes: 
            - ./frontend/website:/usr/src/app
            - /usr/src/app/node_modules
        tty: true
        depends_on: 
            - backend

    backend:
      entrypoint: dockerize -wait tcp://db:5432 -timeout 20s docker-entrypoint.sh
      build:
         # Here we define that it should build from the current directory.
         context: ./backend
         dockerfile: Dockerfile
      networks:
        - app-network
      volumes:
        - ./backend:/app
      environment:
         DATABASE_URL: ecto://postgres:changeme@postgres/development
         SECRET_KEY_BASE: "y+HzGpFdY4OXJq9Ro/QWYbwQnkKaQAy/Mk5/FKN0i5naNfkxSkKmDuQ6vIjOm65r"
         # Variables to connect to our Postgres server.
         PGUSER: postgres
         PGPASSWORD: admin
         PGDATABASE: teinformatech
         PGPORT: 5432
         # Hostname of our Postgres container.
         PGHOST: db
      ports:
         # Mapping the port to make the Phoenix app accessible outside of the container.
         - '4444:4000'
      depends_on:
         # The postgres container needs to be started before we start this container.
         - db

networks: 
  app-network:
    driver: bridge
